-- NurtureNest Oracle Database Schema
-- Run this script in Oracle SQL*Plus or SQL Developer to create the necessary tables

-- Create users table
CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR2(255) UNIQUE NOT NULL,
    password_hash VARCHAR2(255) NOT NULL,
    first_name VARCHAR2(100) NOT NULL,
    last_name VARCHAR2(100) NOT NULL,
    phone VARCHAR2(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create appointments table
CREATE TABLE appointments (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    title VARCHAR2(255) NOT NULL,
    description CLOB,
    appointment_date DATE NOT NULL,
    appointment_time VARCHAR2(10) NOT NULL,
    type VARCHAR2(50) NOT NULL, -- 'virtual', 'in-person'
    status VARCHAR2(20) DEFAULT 'scheduled', -- 'scheduled', 'completed', 'cancelled'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create consultations table
CREATE TABLE consultations (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    doctor_name VARCHAR2(255),
    specialty VARCHAR2(100),
    consultation_date DATE NOT NULL,
    consultation_time VARCHAR2(10) NOT NULL,
    type VARCHAR2(50) NOT NULL, -- 'virtual', 'in-person'
    status VARCHAR2(20) DEFAULT 'scheduled',
    notes CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create articles table
CREATE TABLE articles (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(500) NOT NULL,
    content CLOB NOT NULL,
    category VARCHAR2(100) NOT NULL, -- 'pregnancy', 'postpartum', 'nutrition', 'mental-health'
    author VARCHAR2(255) NOT NULL,
    published CHAR(1) DEFAULT 'Y',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create forum_posts table
CREATE TABLE forum_posts (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    title VARCHAR2(500) NOT NULL,
    content CLOB NOT NULL,
    category VARCHAR2(100),
    likes NUMBER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create forum_comments table
CREATE TABLE forum_comments (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id NUMBER NOT NULL,
    user_id NUMBER NOT NULL,
    content CLOB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES forum_posts(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create emergency_contacts table
CREATE TABLE emergency_contacts (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    name VARCHAR2(255) NOT NULL,
    relationship VARCHAR2(100),
    phone VARCHAR2(20) NOT NULL,
    email VARCHAR2(255),
    is_primary CHAR(1) DEFAULT 'N',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create health_records table
CREATE TABLE health_records (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    record_type VARCHAR2(50) NOT NULL, -- 'blood_pressure', 'weight', 'glucose', etc.
    value NUMBER,
    unit VARCHAR2(20),
    notes CLOB,
    recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create indexes for better performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_appointments_user_id ON appointments(user_id);
CREATE INDEX idx_appointments_date ON appointments(appointment_date);
CREATE INDEX idx_consultations_user_id ON consultations(user_id);
CREATE INDEX idx_consultations_date ON consultations(consultation_date);
CREATE INDEX idx_forum_posts_user_id ON forum_posts(user_id);
CREATE INDEX idx_forum_posts_category ON forum_posts(category);
CREATE INDEX idx_forum_comments_post_id ON forum_comments(post_id);
CREATE INDEX idx_forum_comments_user_id ON forum_comments(user_id);
CREATE INDEX idx_emergency_contacts_user_id ON emergency_contacts(user_id);
CREATE INDEX idx_health_records_user_id ON health_records(user_id);
CREATE INDEX idx_health_records_type ON health_records(record_type);

-- Insert sample data
INSERT INTO articles (title, content, category, author) VALUES
('Prenatal Nutrition: Essential Nutrients for a Healthy Pregnancy', 
 'Proper nutrition during pregnancy is crucial for both mother and baby...', 
 'pregnancy', 'Dr. Sarah Johnson');

INSERT INTO articles (title, content, category, author) VALUES
('Understanding Postpartum Depression: Signs and Support', 
 'Postpartum depression affects many new mothers and is a serious condition...', 
 'mental-health', 'Dr. Michael Chen');

INSERT INTO articles (title, content, category, author) VALUES
('Breastfeeding Benefits and Challenges', 
 'Breastfeeding provides numerous benefits for both mother and baby...', 
 'postpartum', 'Dr. Emily Davis');

INSERT INTO articles (title, content, category, author) VALUES
('Healthy Meal Planning During Pregnancy', 
 'Planning nutritious meals during pregnancy can be challenging but rewarding...', 
 'nutrition', 'Dr. Lisa Rodriguez');

-- Commit the changes
COMMIT;

-- Display success message
SELECT 'NurtureNest Oracle database schema created successfully!' as MESSAGE FROM DUAL;

-- ============================================================================
-- VERIFICATION COMMANDS
-- ============================================================================
-- After running the above schema, you can use these commands to verify:

-- 1. Check if all tables were created
SELECT table_name FROM user_tables ORDER BY table_name;

-- 2. Check table structure for specific table (example: users)
DESCRIBE users;

-- 3. Check all columns for all tables
SELECT table_name, column_name, data_type, nullable 
FROM user_tab_columns 
ORDER BY table_name, column_id;

-- 4. Check indexes
SELECT index_name, table_name, column_name 
FROM user_ind_columns 
ORDER BY table_name, index_name;

-- 5. Check foreign key constraints
SELECT constraint_name, table_name, r_constraint_name, delete_rule
FROM user_constraints 
WHERE constraint_type = 'R';

-- 6. Check sample data in articles table
SELECT COUNT(*) as article_count FROM articles;
SELECT title, category, author FROM articles;

-- 7. Check if sequences were created (for identity columns)
SELECT sequence_name FROM user_sequences;

-- 8. Quick table row counts
SELECT 'users' as table_name, COUNT(*) as row_count FROM users
UNION ALL
SELECT 'appointments', COUNT(*) FROM appointments
UNION ALL
SELECT 'consultations', COUNT(*) FROM consultations
UNION ALL
SELECT 'articles', COUNT(*) FROM articles
UNION ALL
SELECT 'forum_posts', COUNT(*) FROM forum_posts
UNION ALL
SELECT 'forum_comments', COUNT(*) FROM forum_comments
UNION ALL
SELECT 'emergency_contacts', COUNT(*) FROM emergency_contacts
UNION ALL
SELECT 'health_records', COUNT(*) FROM health_records;
